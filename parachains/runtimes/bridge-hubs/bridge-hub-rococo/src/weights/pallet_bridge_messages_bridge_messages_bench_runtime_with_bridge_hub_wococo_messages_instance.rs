// Copyright 2021 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_bridge_messages`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner-b3zmxxc-project-238-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bridge-hub-rococo-dev"), DB CACHE: 1024

// Executed Command:
// target/production/polkadot-parachain
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/builds/parity/mirrors/cumulus/.git/.artifacts/bench.json
// --pallet=pallet_bridge_messages
// --chain=bridge-hub-rococo-dev
// --header=./file_header.txt
// --output=./parachains/runtimes/bridge-hubs/bridge-hub-rococo/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bridge_messages`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bridge_messages::WeightInfo for WeightInfo<T> {
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages InboundLanes (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn receive_single_message_proof() -> Weight {
		// Minimum execution time: 49_348 nanoseconds.
		Weight::from_ref_time(52_687_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages InboundLanes (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn receive_two_messages_proof() -> Weight {
		// Minimum execution time: 63_755 nanoseconds.
		Weight::from_ref_time(67_615_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages InboundLanes (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn receive_single_message_proof_with_outbound_lane_state() -> Weight {
		// Minimum execution time: 54_597 nanoseconds.
		Weight::from_ref_time(56_472_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages InboundLanes (r:1 w:1)
	fn receive_single_message_proof_1_kb() -> Weight {
		// Minimum execution time: 51_363 nanoseconds.
		Weight::from_ref_time(54_025_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages InboundLanes (r:1 w:1)
	fn receive_single_message_proof_16_kb() -> Weight {
		// Minimum execution time: 119_727 nanoseconds.
		Weight::from_ref_time(123_138_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages OutboundLanes (r:1 w:1)
	fn receive_delivery_proof_for_single_message() -> Weight {
		// Minimum execution time: 32_525 nanoseconds.
		Weight::from_ref_time(33_410_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages OutboundLanes (r:1 w:1)
	fn receive_delivery_proof_for_two_messages_by_single_relayer() -> Weight {
		// Minimum execution time: 32_310 nanoseconds.
		Weight::from_ref_time(33_208_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BridgeWococoMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgeWococoParachain ImportedParaHeads (r:1 w:0)
	// Storage: BridgeWococoMessages OutboundLanes (r:1 w:1)
	fn receive_delivery_proof_for_two_messages_by_two_relayers() -> Weight {
		// Minimum execution time: 32_594 nanoseconds.
		Weight::from_ref_time(33_449_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
